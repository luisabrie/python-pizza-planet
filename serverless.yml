service: pizza-planet-api

useDotenv: true

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  memorySize: 128
  logs:
    restApi: true
  logRetentionInDays: 14

plugins:
  - serverless-wsgi
  - serverless-python-requirements
  - serverless-domain-manager
  - serverless-dotenv-plugin
	
custom:
  customDomain:
    domainName: api.pizza.abrie.net
    apiType: rest
    endpointType: edge
    createRoute53Record: true
    hostedZoneId: ${env:DNS_ZONE_ID}
  wsgi:
    app: app.flask_app
    packRequirements: false
  AURORA:
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    HOST:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AuroraRDSCluster, Endpoint.Port]
    VPC_CIDR: 10

functions:
 app:
   handler: wsgi_handler.handler
   timeout: 15
   vpc:
      securityGroupIds:
        - Fn::GetAtt: [ServerlessVPC, DefaultSecurityGroup]
      subnetIds:
        - Ref: ServerlessSubnetA
        - Ref: ServerlessSubnetB
        - Ref: ServerlessSubnetC
   events:
     - http: ANY /
     - http: 'ANY /{proxy+}'
   environment:
      DB_NAME: ${self:custom.AURORA.DB_NAME}
      DB_USER: ${self:custom.AURORA.DB_USER}
      DB_PASSWORD: ${self:custom.AURORA.DB_PASSWORD}
      DB_HOST: ${self:custom.AURORA.HOST}
      DB_PORT: ${self:custom.AURORA.PORT}

resources:
  Resources:
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    ServerlessSubnetA:
      Type: AWS::EC2::Subnet
      DependsOn: ServerlessVPC
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.0.0/24
    ServerlessSubnetB:
      Type: AWS::EC2::Subnet
      DependsOn: ServerlessVPC
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.1.0/24
    ServerlessSubnetC:
      Type: AWS::EC2::Subnet
      DependsOn: ServerlessVPC
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: ${self:custom.AURORA.VPC_CIDR}.0.2.0/24
    AuroraSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Aurora Subnet Group"
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
          - Ref: ServerlessSubnetC
    AuroraRDSCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        MasterUsername: ${self:custom.AURORA.DB_USER}
        MasterUserPassword: ${self:custom.AURORA.DB_PASSWORD}
        DatabaseName: ${self:custom.AURORA.DB_NAME}
        DBSubnetGroupName:
          Ref: AuroraSubnetGroup
        Engine: aurora-postgresql
        EngineMode: serverless
        EngineVersion: 11.16
        ScalingConfiguration:
          AutoPause: true
          MinCapacity: 2
          MaxCapacity: 2
          SecondsUntilAutoPause: 300
        EnableHttpEndpoint: true
        StorageEncrypted: true
        VpcSecurityGroupIds:
          - Fn::GetAtt: [ServerlessVPC, DefaultSecurityGroup]
package:
  exclude:
    - .gitignore
    - .git/**
    - .vscode/**
    - .pytest_cache/*
    - node_modules/**
    - .serverless/**
    - .venv/**
    - .env
    - .env.example
    - ui/**